. HTTP/0.9
    . 只有一个命令GET。
        我们现在经常用到的GET请求、POST请求，都是http的命令，或者叫http的方法。
        后面章节中会详细讲解关于命令的内容。

    . 没有HEADER等描述数据的信息。

    . 服务器发送完毕，就关闭 TCP 连接。
        这里大家要注意一点，这里提到的 TCP 连接和我们讲的 HTTP 请求是不一样的。
        如果大家做过web开发，大家应该会听到一些“HTTP 请求的并发数”这种术语的描述，
        TCP 连接和HTTP请求是不同的概念，在同一个 TCP 连接里面，可以有很多个 HTTP 请求.
        以前的 HTTP 协议版本是不允许这么做，但是从 HTTP/1.1 里面，已经可以这么做，
        而且在 HTTP/2 里面更大的优化，来提高 HTTP 传输的效率和服务器的性能

        所以，一个 TCP连接，对应的是多个HTTP请求。
        一个HTTP请求肯定是在某一个TCP连接里面去发送的。

.HTTP/1.0
    .增加了很多命令
      如post, put

    .增加了status code 和 header 
      status code 是用来描述服务端处理某一个请求之后的状态的。
      header 无论是请求还是响应相关数据的描述以及数据如何操作。

    .增加了多字符集支持、多部分发送、权限、缓存等


.HTTP/1.1
    这个版本只是在HTTP/1.0上增加了一些功能，来优化整个网络连接的过程。

    .持久连接
      在HTTP/1.0版本中，一个HTTP请求对应着一个TCP连接。
      一个HTTP请求必须在客户端与服务端创建一个TCP连接。
      在服务端返回完内容后，这个TCP连接就关闭掉了。这样的成本是比较高的，
      因为在创建TCP连接的过程，需要经历三次握手，这部分是在TCP连接里面做掉的，
      我们不需要关心，但是我们需要知道，它在创建的过程中消耗是比较高的，
      所以如果我们在用完了一个TCP连接之后，如果不关闭，以后新的HTTP请求还可以在这个
      TCP连接里面进行发送的话，它的性能肯定会高很多。
      这是在HTTP/1.1里面已经给我们实现了。

    .pipeline  
      客户端：可以在同一个TCP连接中发送多个HTTP请求，
      服务端：按顺序进行处理并返回
        比如，有两个HTTP请求A，B按顺序到达服务端。A处理的时间较长，B不能先发送返回内容，
        必须等待A处理并发送完之后，B才可以发送。串行。
        这项在HTTP/2里面有所优化。

    .增加了host和其它一些命令
      host:
       有了host，我们就可以在同一台物理服务器上跑多个web服务。比如node.js的web服务，或者java的web服务，
       然后通过host字段，表示，都是请求到这一台物理服务器上。

       这个host头增加的好处是：
       在同一个物理服务器或者同一个集群里面，我们可以部署很多不同的web服务来进行使用，
       这样的话提高服务器的使用效率。

.HTTP2
  现在还未普及，但肯定是HTTP的未来，毫无疑问。
  HTTP2就是为了解决HTTP/1.1里面性能低下的问题。

  .所有数据以二进制进行传输。
    在HTTP/1.1里，大部分数据都是通过字符串来传输的。所以它的分片方式是不太一样的。
    在HTTP2里面，所有的数据都是以帧进行传输的。

  .同一个连接里面发送多个请求不再需要按照顺序来。  
    它可以同时返回第一个请求里面的数据，也可以同时返回第二个请求里面的数据。这样就是并行的效率。   
    能够更大限制的让web应用的传输效率有质的提升。 
  
  .头信息压缩以及推送等提高效率的功能。
    头信息压缩：
      在HTTP/1.1里面，每一次发送请求或者返回响应，它的http头都是需要进行完整的发送或者返回的。
      这部分头信息是以字符串形式来发送或者返回的，它们占用的带宽量是比较大的，
      所以在HTTP2里对这部分头信息进行了压缩，这样就可以有效的减少带宽使用

    推送：
      在HTTP/1.1里面,客户端永远是主动方，服务端永远是被动方。
      在HTTP2里面，有了推送概念，也就是说服务端是可以主动发起数据传输的。  
      举例：html里面会有css或者js文件，它们都是以链接的形式，通过浏览器解析，再去请求对应的css或者js。
      这里就包含一个顺序的问题，
      需要先请求到html文本，然后在浏览器中运行，解析了html文本之后，才能发送
      css或者js请求。
      http2里面，会在请求html文本的同时，可以主动把html文本所用到的css或者js文件推送到客户端，
      这样的话，html文本和css以及js文件的发送是顺序执行的。而不是串行的。整体的传输效率和性能会高很多。
     

