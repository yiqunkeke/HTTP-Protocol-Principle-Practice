在HTTP协议当中，我们使用的是URL。我们来理解下什么是URI、URN、URL

. URI = Uniform Resource Identifier 统一资源标志符
    . 包含URL 和 URN
    . 用来唯一标识互联网上的信息资源 

     HTTP协议或者FTP协议，它们的目的都是从互联网上找到某一资源并且去获得该资源

. URL = Uniform Resource Locator 统一资源定位器

    http://user:pass@host.com:80/path?query=string#hash

    . http://   schema  
               定义用什么协议来获取资源，例如ftp或者mailto等。
               不同的协议，有不同的实现方式。通过不同的协议访问服务，解析的方式会不一样。
               这就是协议的重要性，因为它定义了发送方如何去传输数据以及服务如何去解析数据。

    . user:pass@    用户名和密码
                这种认证方式在现在已经不太用到了，因为有更好的方式去做用户的认证。
                因为如果每一次用户的认证都需要在url中去输入用户名和密码，它是一个
                非常不安全而且非常麻烦的做法。
                现在的web开发中基本上用不到，大家只要知道在url的定义中有这一块区域即可。

    . host.com 定义资源所在的物理服务器在互联网中的位置
               因为我们知道，在互联网中最基础的定义机器是根据它的IP，或者是域名。

    . :80 端口  为什么要有端口？ 
                因为每一台物理服务器上都可能会运行多个web服务，每一个web服务对应不同的端口。
                我们要找的是某一台物理服务器上某一个web服务中对应的资源，
                我们就要指定我们要找的是哪一个web服务。
                
                因为整个HTTP协议它其实就是用来定位的。
                所以我们首先要找根据host来找到物理服务器，然后依据端口来找到web服务器
                相当于我们的搜索范围从大到小，一步步精确。

                如果不带端口访问url，其实默认访问的是80端口。
                因为端口是不方便用户记忆的，所以我们发布上去的默认是用域名，不带端口的。

    . /path  路由           
                因为web服务中可能存放了非常多的内容。我们具体要如何找到某一个内容，就需要通过路由定位。
                / 代表根目录

                从HTTP的定义上来讲，我们这个路径/path，应该是直接对应到我们web服务结构下的路径。
                由于我们的web应用变的越来越复杂，很多数据都是存在数据库中的，不是对应磁盘上的文件所在的位置。
                所以我们更多时候是在程序里面去判断，而不是直接对应目录结构的映射关系。
                这就是路由的定义与使用方式。

    . ?query=string 搜索参数  就是请求的资源如何进行搜索，基本上我们的web服务就是依靠这种方式来传参。

    . #hash 哈希  在HTTP的定义里面，它代表我们请求的URL它找到了一个文档，哈希就代表了文档中的某一个片段。
                现在哈希主要用于web服务中锚点定位的服务。


    以上就是整个url的格式，每一部分都有其特定含义，此类格式的都叫做URL, 比如ftp协议。

 .URN = 永久统一资源定位符 现在用的不多，了解下即可
  在资源移动之后还能被找到
  目前还没有非常成熟的使用方案

