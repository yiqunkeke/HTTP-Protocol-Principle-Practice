. cookie
  . 通过Set-Cookie设置  
    cookie是在服务端返回数据后，“通过Set-Cookie设置”到浏览器里面，并保存在浏览器中的内容，
    那么这个内容，我们就叫它cookie

  .下次请求会自动带上
    浏览器保存完cookie以后，下次在同域的请求中就会带上这个cookie,通过传输过程中携带的cookie
    来保证访问的数据是这个用户的。
    这就类似于后面要讲的session

  . 键值对，可以设置多个

. cookie属性
  . max-age和expires设置过期时间   
  . Secure属性--代表只有在https的时候才会携带，http不会携带
  . HttpOnly属性--无法通过document.cookie访问
     下面知识了解即可
    （安全性--
      因为互联网上存在各种各样的攻击，比如跨站点请求伪造CSRF(Cross-Site Request Forgery)攻击，可以这样理解这个攻击：
      攻击者盗用了你的身份，以你的名义发送恶意请求，对服务器来说这个请求是完全合法的，
      但是却完成了攻击者所期望的一个操作，比如以你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。 
      
      如下：其中Web A为存在CSRF漏洞的网站，Web B为攻击者构建的恶意网站，User C为Web A网站的合法用户。

      CSRF攻击攻击原理及过程如下：

       1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；

       2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；

       3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；

       4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；

       5. 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，
          所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 
  ）

实例见cookie目录

session 与cookie不是同一个概念。
  
  . Cookie和Session的区别
    前言
    HTTP是一种无状态的协议，为了分辨链接是谁发起的，就需要我们自己去解决这个问题。
    不然有些情况下即使是同一个网站我们每打开一个页面也都要登录一下。
    而Session和Cookie就是为解决这个问题而提出来的两个机制。

    应用场景
    日常登录一个网站，今天输入用户名密码登录了，第二天再打开很多情况下就直接打开了。这个时候用到的一个机制就是cookie。
    session的一个场景是购物车，添加了商品之后客户端处可以知道添加了哪些商品，而服务器端如何判别呢，所以也需要存储一些信息，这里就用到了session。

    Cookie
    通俗讲，Cookie是访问某些网站以后在本地存储的一些网站相关的信息，下次再访问的时候减少一些步骤。
    另外一个更准确的说法是：Cookies是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器，是一种在客户端保持状态的方案。

    Session
    Session是存在服务器的一种用来存放用户数据的类HashTable结构。
    当浏览器第一次发送请求时，服务器自动生成了一个HashTable和一个Session ID用来唯一标识这个HashTable，并将其通过响应发送到浏览器。
    当浏览器第二次发送请求，会将前一次服务器响应中的Session ID放在请求中一并发送到服务器上，服务器从请求中提取出Session ID，
    并和保存的所有Session ID进行对比，找到这个用户对应的HashTable。

    Session的实现方式和Cookie有一定关系。试想一下，建立一个连接就生成一个session id，那么打开几个页面就好几个了，这显然不是我们想要的，
    那么该怎么区分呢？这里就用到了Cookie，我们可以把session id存在Cookie中，然后每次访问的时候将Session id带过去就可以识别了，是不是很方便~

    区别
    通过上面的简单叙述，很容易看出来最明显的不同是一个在客户端一个在服务端。因为Cookie存在客户端所以用户可以看见，所以也可以编辑伪造，不是十分安全。
    Session过多的时候会消耗服务器资源，所以大型网站会有专门的Session服务器，而Cookie存在客户端所以没什么问题。
    
    Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。
    
    Cookie 一般用来保存用户信息 比如①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；
    ②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，
    下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③登录一次网站后访问网站其他页面不需要重新登录。
    Session 的主要作用就是通过服务端记录用户的状态。 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，
    因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。

    Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。

    Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。
    如果使用 Cookie 的一些敏感信息不要写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。

   阅读：
    https://www.jianshu.com/p/9a561b36e9f3
    （重点阅读！！！重点阅读！！！重点阅读！！！）